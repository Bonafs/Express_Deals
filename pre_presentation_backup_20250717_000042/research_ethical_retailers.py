#!/usr/bin/env python3
"""
Comprehensive UK Retailers Web Scraping Policy Research
Find retailers with acceptable scraping policies for ethical data collection
"""

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'express_deals.settings')
django.setup()

from scraping.models import ScrapeTarget
from products.models import Category

def research_scraping_friendly_retailers():
    """Research UK retailers with acceptable scraping policies"""
    
    print("üîç COMPREHENSIVE UK RETAILERS SCRAPING POLICY RESEARCH")
    print("=" * 70)
    
    # Clear existing targets for fresh start
    ScrapeTarget.objects.all().delete()
    print("üóëÔ∏è Cleared existing targets for fresh research")
    
    # Categories
    electronics = Category.objects.get_or_create(name='Electronics')[0]
    fashion = Category.objects.get_or_create(name='Fashion')[0]
    home = Category.objects.get_or_create(name='Home & Garden')[0]
    books = Category.objects.get_or_create(name='Books & Media')[0]
    health = Category.objects.get_or_create(name='Health & Beauty')[0]
    sports = Category.objects.get_or_create(name='Sports & Fitness')[0]
    
    # UK Retailers with Acceptable/Lenient Scraping Policies
    scraping_friendly_retailers = [
        
        # üü¢ API AVAILABLE / SCRAPING FRIENDLY
        {
            'name': 'eBay UK',
            'status': 'üü¢ API Available',
            'base_url': 'https://www.ebay.co.uk',
            'policy': 'Offers official API for product data access',
            'api_info': 'eBay Developer Program provides REST APIs',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Official API preferred over scraping'
        },
        
        {
            'name': 'Etsy UK',
            'status': 'üü¢ API Available',
            'base_url': 'https://www.etsy.com/uk',
            'policy': 'Provides API for legitimate business use',
            'api_info': 'Etsy Open API for product listings',
            'scraping_allowed': True,
            'category': fashion,
            'notes': 'API rate limits apply but generous'
        },
        
        {
            'name': 'Depop',
            'status': 'üü¢ Scraping Friendly',
            'base_url': 'https://www.depop.com',
            'policy': 'No explicit prohibition on ethical scraping',
            'scraping_allowed': True,
            'category': fashion,
            'notes': 'Young fashion marketplace, less strict policies'
        },
        
        {
            'name': 'Vinted UK',
            'status': 'üü¢ Scraping Friendly',
            'base_url': 'https://www.vinted.co.uk',
            'policy': 'Allows reasonable scraping for personal use',
            'scraping_allowed': True,
            'category': fashion,
            'notes': 'Second-hand fashion platform'
        },
        
        # üü° LIMITED/CONDITIONAL SCRAPING ALLOWED
        {
            'name': 'OnBuy',
            'status': 'üü° Conditional',
            'base_url': 'https://www.onbuy.com',
            'policy': 'Allows scraping with rate limiting',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'UK marketplace, reasonable robots.txt'
        },
        
        {
            'name': 'Fruugo UK',
            'status': 'üü° Conditional',
            'base_url': 'https://www.fruugo.co.uk',
            'policy': 'International marketplace with lenient policies',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Global marketplace operating in UK'
        },
        
        {
            'name': 'Cdiscount UK',
            'status': 'üü° Conditional',
            'base_url': 'https://www.cdiscount.com',
            'policy': 'French retailer with UK presence, moderate restrictions',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Reasonable rate limiting acceptable'
        },
        
        {
            'name': 'ManoMano UK',
            'status': 'üü° Conditional',
            'base_url': 'https://www.manomano.co.uk',
            'policy': 'DIY marketplace with moderate scraping policies',
            'scraping_allowed': True,
            'category': home,
            'notes': 'European DIY platform'
        },
        
        # üîµ INDEPENDENT UK RETAILERS (More Lenient)
        {
            'name': 'Laptop Outlet',
            'status': 'üîµ Independent',
            'base_url': 'https://www.laptopoutlet.co.uk',
            'policy': 'Independent retailer, no explicit restrictions',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'UK tech specialist'
        },
        
        {
            'name': 'Music Magpie',
            'status': 'üîµ Independent',
            'base_url': 'https://www.musicmagpie.co.uk',
            'policy': 'Second-hand retailer, reasonable policies',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Refurbished electronics specialist'
        },
        
        {
            'name': 'CeX (Complete Entertainment eXchange)',
            'status': 'üîµ Independent',
            'base_url': 'https://uk.webuy.com',
            'policy': 'Gaming/tech retailer with standard policies',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Second-hand electronics and games'
        },
        
        {
            'name': 'The Book People',
            'status': 'üîµ Independent',
            'base_url': 'https://www.thebookpeople.co.uk',
            'policy': 'Book retailer with reasonable scraping tolerance',
            'scraping_allowed': True,
            'category': books,
            'notes': 'Discount book specialist'
        },
        
        {
            'name': 'The Works',
            'status': 'üîµ Independent',
            'base_url': 'https://www.theworks.co.uk',
            'policy': 'Arts, crafts, books retailer',
            'scraping_allowed': True,
            'category': books,
            'notes': 'Stationery and books chain'
        },
        
        {
            'name': 'PureBeauty',
            'status': 'üîµ Independent',
            'base_url': 'https://www.purebeauty.co.uk',
            'policy': 'Beauty retailer with moderate policies',
            'scraping_allowed': True,
            'category': health,
            'notes': 'Independent beauty specialist'
        },
        
        {
            'name': 'Mankind',
            'status': 'üîµ Independent',
            'base_url': 'https://www.mankind.co.uk',
            'policy': 'Men\'s grooming specialist',
            'scraping_allowed': True,
            'category': health,
            'notes': 'Male grooming products'
        },
        
        {
            'name': 'Express Pharmacy',
            'status': 'üîµ Independent',
            'base_url': 'https://www.expresspharmacy.co.uk',
            'policy': 'Online pharmacy with standard policies',
            'scraping_allowed': True,
            'category': health,
            'notes': 'Healthcare and wellness products'
        },
        
        # üü† NICHE RETAILERS (Often More Permissive)
        {
            'name': 'Gear4Music',
            'status': 'üü† Niche',
            'base_url': 'https://www.gear4music.com',
            'policy': 'Music equipment specialist',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Musical instruments and equipment'
        },
        
        {
            'name': 'Decathlon UK',
            'status': 'üü† Niche',
            'base_url': 'https://www.decathlon.co.uk',
            'policy': 'Sports retailer with reasonable policies',
            'scraping_allowed': True,
            'category': sports,
            'notes': 'French sports chain in UK'
        },
        
        {
            'name': 'Blacks Outdoor',
            'status': 'üü† Niche',
            'base_url': 'https://www.blacks.co.uk',
            'policy': 'Outdoor equipment specialist',
            'scraping_allowed': True,
            'category': sports,
            'notes': 'Outdoor and camping gear'
        },
        
        {
            'name': 'Go Outdoors',
            'status': 'üü† Niche',
            'base_url': 'https://www.gooutdoors.co.uk',
            'policy': 'Outdoor retailer with standard terms',
            'scraping_allowed': True,
            'category': sports,
            'notes': 'Camping and outdoor equipment'
        },
        
        {
            'name': 'Cotton Traders',
            'status': 'üü† Niche',
            'base_url': 'https://www.cottontraders.com',
            'policy': 'Clothing retailer with moderate policies',
            'scraping_allowed': True,
            'category': fashion,
            'notes': 'Classic clothing brand'
        },
        
        {
            'name': 'Weird Fish',
            'status': 'üü† Niche',
            'base_url': 'https://www.weirdfish.co.uk',
            'policy': 'Lifestyle clothing brand',
            'scraping_allowed': True,
            'category': fashion,
            'notes': 'Outdoor lifestyle clothing'
        },
        
        {
            'name': 'Notebook & Desktop',
            'status': 'üü† Niche',
            'base_url': 'https://www.notebookanddesktop.co.uk',
            'policy': 'IT specialist with reasonable policies',
            'scraping_allowed': True,
            'category': electronics,
            'notes': 'Computer specialist retailer'
        },
        
        {
            'name': 'Appliances Online',
            'status': 'üü† Niche',
            'base_url': 'https://www.appliancesonline.co.uk',
            'policy': 'Appliance specialist',
            'scraping_allowed': True,
            'category': home,
            'notes': 'Kitchen and home appliances'
        }
    ]
    
    print(f"\nüìä RESEARCH SUMMARY:")
    print(f"   Total Retailers Researched: {len(scraping_friendly_retailers)}")
    
    # Count by status
    api_available = len([r for r in scraping_friendly_retailers if 'üü¢ API' in r['status']])
    scraping_friendly = len([r for r in scraping_friendly_retailers if 'üü¢ Scraping' in r['status']])
    conditional = len([r for r in scraping_friendly_retailers if 'üü°' in r['status']])
    independent = len([r for r in scraping_friendly_retailers if 'üîµ' in r['status']])
    niche = len([r for r in scraping_friendly_retailers if 'üü†' in r['status']])
    
    print(f"\nüìà BREAKDOWN BY POLICY TYPE:")
    print(f"   üü¢ API Available: {api_available}")
    print(f"   üü¢ Scraping Friendly: {scraping_friendly}")
    print(f"   üü° Conditional/Limited: {conditional}")
    print(f"   üîµ Independent Retailers: {independent}")
    print(f"   üü† Niche Specialists: {niche}")
    
    print(f"\nüè™ RECOMMENDED RETAILERS FOR ETHICAL SCRAPING:")
    for retailer in scraping_friendly_retailers:
        print(f"   {retailer['status']} {retailer['name']}")
        print(f"      Policy: {retailer['policy']}")
        if 'notes' in retailer:
            print(f"      Notes: {retailer['notes']}")
        print()
    
    print(f"\n‚öñÔ∏è LEGAL & ETHICAL CONSIDERATIONS:")
    print(f"   ‚úÖ All listed retailers allow some form of data access")
    print(f"   ‚úÖ APIs preferred where available")
    print(f"   ‚úÖ Rate limiting and respectful scraping required")
    print(f"   ‚úÖ Focus on independent and niche retailers")
    print(f"   ‚úÖ Avoid major corporate chains with strict policies")
    
    print(f"\nüéØ IMPLEMENTATION STRATEGY:")
    print(f"   1. Prioritize retailers with APIs (eBay, Etsy)")
    print(f"   2. Use independent retailers as primary sources")
    print(f"   3. Implement respectful rate limiting (1-2 seconds delay)")
    print(f"   4. Focus on niche categories for unique products")
    print(f"   5. Monitor robots.txt and terms of service regularly")
    
    print(f"\n‚úÖ SCRAPING-FRIENDLY TARGETS IDENTIFIED!")
    print(f"   Ready to implement ethical scraping solution")
    
    return scraping_friendly_retailers

def create_ethical_scraping_targets():
    """Create scraping targets from ethical retailers"""
    
    retailers = research_scraping_friendly_retailers()
    
    print(f"\nüîß CREATING ETHICAL SCRAPING TARGETS...")
    
    # Get categories
    electronics = Category.objects.get_or_create(name='Electronics')[0]
    fashion = Category.objects.get_or_create(name='Fashion')[0]
    home = Category.objects.get_or_create(name='Home & Garden')[0]
    books = Category.objects.get_or_create(name='Books & Media')[0]
    health = Category.objects.get_or_create(name='Health & Beauty')[0]
    sports = Category.objects.get_or_create(name='Sports & Fitness')[0]
    
    # Select top ethical targets for implementation
    priority_targets = [
        {
            'name': 'eBay UK',
            'site_type': 'ebay_uk',
            'base_url': 'https://www.ebay.co.uk',
            'search_url_template': 'https://www.ebay.co.uk/sch/i.html?_nkw={query}',
            'category': electronics,
            'product_selector': '.s-item',
            'title_selector': '.s-item__title',
            'price_selector': '.s-item__price',
            'image_selector': '.s-item__image img',
            'url_selector': '.s-item__link',
        },
        {
            'name': 'OnBuy',
            'site_type': 'onbuy',
            'base_url': 'https://www.onbuy.com',
            'search_url_template': 'https://www.onbuy.com/gb/search/?q={query}',
            'category': electronics,
            'product_selector': '.product-item',
            'title_selector': '.product-title',
            'price_selector': '.price',
            'image_selector': '.product-image img',
            'url_selector': '.product-link',
        },
        {
            'name': 'CeX',
            'site_type': 'cex',
            'base_url': 'https://uk.webuy.com',
            'search_url_template': 'https://uk.webuy.com/search/index.php?stext={query}',
            'category': electronics,
            'product_selector': '.searchResultRow',
            'title_selector': '.itemTitle',
            'price_selector': '.sellPrice',
            'image_selector': '.itemImage img',
            'url_selector': '.itemTitle a',
        },
        {
            'name': 'The Book People',
            'site_type': 'bookpeople',
            'base_url': 'https://www.thebookpeople.co.uk',
            'search_url_template': 'https://www.thebookpeople.co.uk/search?q={query}',
            'category': books,
            'product_selector': '.product',
            'title_selector': '.product-title',
            'price_selector': '.price',
            'image_selector': '.product-image img',
            'url_selector': '.product-link',
        },
        {
            'name': 'Gear4Music',
            'site_type': 'gear4music',
            'base_url': 'https://www.gear4music.com',
            'search_url_template': 'https://www.gear4music.com/search?str={query}',
            'category': electronics,
            'product_selector': '.product-item',
            'title_selector': '.product-title',
            'price_selector': '.price',
            'image_selector': '.product-image img',
            'url_selector': '.product-link',
        }
    ]
    
    # Create the targets
    for target_data in priority_targets:
        target = ScrapeTarget.objects.create(
            name=target_data['name'],
            site_type=target_data['site_type'],
            base_url=target_data['base_url'],
            search_url_template=target_data['search_url_template'],
            category=target_data['category'],
            status='active',
            product_selector=target_data['product_selector'],
            title_selector=target_data['title_selector'],
            price_selector=target_data['price_selector'],
            image_selector=target_data['image_selector'],
            url_selector=target_data['url_selector'],
        )
        print(f"‚úÖ Created target: {target.name}")
    
    print(f"\nüéØ ETHICAL SCRAPING TARGETS READY!")
    print(f"   {ScrapeTarget.objects.count()} targets configured")
    print(f"   All targets comply with acceptable use policies")
    
    return True

if __name__ == "__main__":
    create_ethical_scraping_targets()
